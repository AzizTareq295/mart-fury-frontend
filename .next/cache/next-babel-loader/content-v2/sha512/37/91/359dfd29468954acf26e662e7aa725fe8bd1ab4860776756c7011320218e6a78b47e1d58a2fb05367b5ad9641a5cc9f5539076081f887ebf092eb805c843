{"ast":null,"code":"import { all, put, takeEvery } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { actionTypes, getCartError, getCartSuccess, updateCartSuccess, updateCartError } from './action';\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: 'Success',\n    description: 'This product has been added to your cart!',\n    duration: 1\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: 'Remove A Item',\n    description: 'This product has been removed from your cart!',\n    duration: 1\n  });\n};\n\nexport const calculateAmount = obj => Object.values(obj).reduce((acc, product) => acc + product.quantity * product.price, 0).toFixed(2);\n\nfunction* getCartSaga() {\n  try {\n    yield put(getCartSuccess());\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* addItemSaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    const item = {\n      id: product.id,\n      name: product.name,\n      slug: product.slug,\n      sku: product.sku[0].sku,\n      sku_id: product.sku[0].id,\n      regular_price: product.sku[0].regular_price,\n      sell_price: product.sku[0].sell_price,\n      price: product.sku[0].sell_price > 0 ? product.sku[0].sell_price : product.sku[0].regular_price,\n      product_stock: product.sku[0].stock,\n      thumbnail: product.product_media.feature_img,\n      quantity: 1\n    };\n    const localCart = JSON.parse(localStorage.getItem('persist:martfury')).cart;\n    let currentCart = JSON.parse(localCart);\n    let existItem = currentCart.cartItems.find(p => parseInt(p.id) === parseInt(item.id));\n\n    if (existItem) {\n      existItem.quantity += item.quantity;\n    } else {\n      if (!item.quantity) {\n        item.quantity = 1;\n      }\n\n      currentCart.cartItems.push(item);\n    }\n\n    currentCart.amount = calculateAmount(currentCart.cartItems);\n    currentCart.cartTotal++;\n    yield put(updateCartSuccess(currentCart));\n    modalSuccess('success');\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* removeItemSaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    let localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:martfury')).cart);\n    let index = localCart.cartItems.findIndex(p => parseInt(p.id) === parseInt(product.id));\n    localCart.cartTotal = localCart.cartTotal - product.quantity;\n    localCart.cartItems.splice(index, 1);\n    localCart.amount = calculateAmount(localCart.cartItems);\n\n    if (localCart.cartItems.length === 0) {\n      localCart.cartItems = [];\n      localCart.amount = 0;\n      localCart.cartTotal = 0;\n    }\n\n    yield put(updateCartSuccess(localCart));\n    modalWarning('warning');\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* increaseQtySaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    let localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:martfury')).cart);\n    let selectedItem = localCart.cartItems.find(p => parseInt(p.id) === parseInt(product.id));\n    console.log(selectedItem);\n\n    if (selectedItem) {\n      selectedItem.quantity++;\n      localCart.cartTotal++;\n      localCart.amount = calculateAmount(localCart.cartItems);\n    }\n\n    yield put(updateCartSuccess(localCart));\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* decreaseItemQtySaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    const localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:martfury')).cart);\n    let selectedItem = localCart.cartItems.find(p => parseInt(p.id) === parseInt(product.id));\n\n    if (selectedItem) {\n      selectedItem.quantity--;\n      localCart.cartTotal--;\n      localCart.amount = calculateAmount(localCart.cartItems);\n    }\n\n    yield put(updateCartSuccess(localCart));\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* clearCartSaga() {\n  try {\n    const emptyCart = {\n      cartItems: [],\n      amount: 0,\n      cartTotal: 0\n    };\n    yield put(updateCartSuccess(emptyCart));\n  } catch (err) {\n    yield put(updateCartError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_CART, getCartSaga)]);\n  yield all([takeEvery(actionTypes.ADD_ITEM, addItemSaga)]);\n  yield all([takeEvery(actionTypes.REMOVE_ITEM, removeItemSaga)]);\n  yield all([takeEvery(actionTypes.INCREASE_QTY, increaseQtySaga)]);\n  yield all([takeEvery(actionTypes.DECREASE_QTY, decreaseItemQtySaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}