{"ast":null,"code":"import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport UserRepository from '~/repositories/UserRepository';\nimport { actionTypes, loginSuccess, logOutSuccess, registerSuccess } from './action';\nimport Axios from 'axios';\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: 'Wellcome back',\n    description: 'You are login successful!'\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: 'Good bye!',\n    description: 'Your account has been logged out!'\n  });\n};\n\nfunction* loginSaga(payload) {\n  const data = payload.payload.data;\n\n  try {\n    const res = yield call(UserRepository.loginInfo, data);\n    yield put(loginSuccess(res));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* registerSaga(payload) {\n  const data = payload.payload.data;\n\n  try {\n    const res = yield call(UserRepository.registerInfo, data);\n    yield put(registerSuccess(res));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* logOutSaga() {\n  try {\n    yield put(logOutSuccess());\n    modalWarning('warning');\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.LOGIN_REQUEST, loginSaga)]);\n  yield all([takeEvery(actionTypes.REGISTER_REQUEST, registerSaga)]);\n  yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}